{"version":3,"file":"ClickOutSide.vue_vue_type_style_index_0_scoped_edbeaf5e_lang.4a88cdb0.js","sources":["../../../src/vueComponent/imgPreview/preview/resume.svg","../../../src/vueComponent/imgPreview/preview/p-rotate.svg","../../../src/vueComponent/imgPreview/preview/scale.svg","../../../src/vueComponent/imgPreview/preview/unscale.svg","../../../src/vueComponent/imgPreview/preview/unrotate.svg","../../../src/vueComponent/imgPreview/Functional.vue","../../../src/vueComponent/dragDialog/component.ts"],"sourcesContent":["export default \"__VITE_ASSET__6e209205__\"","export default \"__VITE_ASSET__1d232189__\"","export default \"__VITE_ASSET__8d8ebde4__\"","export default \"__VITE_ASSET__99ad049c__\"","export default \"__VITE_ASSET__f9dd5a27__\"","<script lang=\"tsx\">\r\n  import { defineComponent, ref, unref, computed, reactive, watchEffect, PropType } from 'vue';\r\n  import { CloseOutlined, LeftOutlined, RightOutlined } from '@ant-design/icons-vue';\r\n  import resumeSvg from './preview/resume.svg';\r\n  import rotateSvg from './preview/p-rotate.svg';\r\n  import scaleSvg from './preview/scale.svg';\r\n  import unScaleSvg from './preview/unscale.svg';\r\n  import unRotateSvg from './preview/unrotate.svg';\r\n\r\n  enum StatueEnum {\r\n    LOADING,\r\n    DONE,\r\n    FAIL,\r\n  }\r\n  interface ImgState {\r\n    currentUrl: string;\r\n    imgScale: number;\r\n    imgRotate: number;\r\n    imgTop: number;\r\n    imgLeft: number;\r\n    currentIndex: number;\r\n    status: StatueEnum;\r\n    moveX: number;\r\n    moveY: number;\r\n    show: boolean;\r\n  }\r\n  const props = {\r\n    show: {\r\n      type: Boolean as PropType<boolean>,\r\n      default: false,\r\n    },\r\n    imageList: {\r\n      type: [Array] as PropType<string[]>,\r\n      default: null,\r\n    },\r\n    index: {\r\n      type: Number as PropType<number>,\r\n      default: 0,\r\n    },\r\n    scaleStep: {\r\n      type: Number as PropType<number>,\r\n    },\r\n    defaultWidth: {\r\n      type: Number as PropType<number>,\r\n    },\r\n    maskClosable: {\r\n      type: Boolean as PropType<boolean>,\r\n    },\r\n    rememberState: {\r\n      type: Boolean as PropType<boolean>,\r\n    },\r\n  };\r\n\r\n  const prefixCls = 'img-preview';\r\n  export default defineComponent({\r\n    name: 'ImagePreview',\r\n    props,\r\n    emits: ['img-load', 'img-error'],\r\n    setup(props, { expose, emit }) {\r\n      interface stateInfo {\r\n        scale: number;\r\n        rotate: number;\r\n        top: number;\r\n        left: number;\r\n      }\r\n      const stateMap = new Map<string, stateInfo>();\r\n      const imgState = reactive<ImgState>({\r\n        currentUrl: '',\r\n        imgScale: 1,\r\n        imgRotate: 0,\r\n        imgTop: 0,\r\n        imgLeft: 0,\r\n        status: StatueEnum.LOADING,\r\n        currentIndex: 0,\r\n        moveX: 0,\r\n        moveY: 0,\r\n        show: props.show,\r\n      });\r\n\r\n      const wrapElRef = ref<HTMLDivElement | null>(null);\r\n      const imgElRef = ref<HTMLImageElement | null>(null);\r\n\r\n      // 初始化\r\n      function init() {\r\n        initMouseWheel();\r\n        const { index, imageList } = props;\r\n\r\n        if (!imageList || !imageList.length) {\r\n          throw new Error('imageList is undefined');\r\n        }\r\n        imgState.currentIndex = index;\r\n        handleIChangeImage(imageList[index]);\r\n      }\r\n\r\n      // 重置\r\n      function initState() {\r\n        imgState.imgScale = 1;\r\n        imgState.imgRotate = 0;\r\n        imgState.imgTop = 0;\r\n        imgState.imgLeft = 0;\r\n      }\r\n\r\n      // 初始化鼠标滚轮事件\r\n      function initMouseWheel() {\r\n        const wrapEl = unref(wrapElRef);\r\n        if (!wrapEl) {\r\n          return;\r\n        }\r\n        (wrapEl as any).onmousewheel = scrollFunc;\r\n        // 火狐浏览器没有onmousewheel事件，用DOMMouseScroll代替\r\n        document.body.addEventListener('DOMMouseScroll', scrollFunc);\r\n        // 禁止火狐浏览器下拖拽图片的默认事件\r\n        document.ondragstart = function () {\r\n          return false;\r\n        };\r\n      }\r\n\r\n      const getScaleStep = computed(() => {\r\n        const scaleStep = props?.scaleStep ?? 0;\r\n        if (scaleStep ?? (0 > 0 && scaleStep < 100)) {\r\n          return scaleStep / 100;\r\n        } else {\r\n          return imgState.imgScale / 10;\r\n        }\r\n      });\r\n\r\n      // 监听鼠标滚轮\r\n      function scrollFunc(e: any) {\r\n        e = e || window.event;\r\n        e.delta = e.wheelDelta || -e.detail;\r\n\r\n        e.preventDefault();\r\n        if (e.delta > 0) {\r\n          // 滑轮向上滚动\r\n          scaleFunc(getScaleStep.value);\r\n        }\r\n        if (e.delta < 0) {\r\n          // 滑轮向下滚动\r\n          scaleFunc(-getScaleStep.value);\r\n        }\r\n      }\r\n      // 缩放函数\r\n      function scaleFunc(num: number) {\r\n        if (imgState.imgScale <= 0.2 && num < 0) return;\r\n        imgState.imgScale += num;\r\n      }\r\n\r\n      // 旋转图片\r\n      function rotateFunc(deg: number) {\r\n        imgState.imgRotate += deg;\r\n      }\r\n\r\n      // 鼠标事件\r\n      function handleMouseUp() {\r\n        const imgEl = unref(imgElRef);\r\n        if (!imgEl) return;\r\n        imgEl.onmousemove = null;\r\n      }\r\n\r\n      // 更换图片\r\n      function handleIChangeImage(url: string) {\r\n        imgState.status = StatueEnum.LOADING;\r\n        const img = new Image();\r\n        img.src = url;\r\n        img.onload = (e: Event) => {\r\n          if (imgState.currentUrl !== url) {\r\n            const ele: any[] = e.composedPath();\r\n            if (props.rememberState) {\r\n              // 保存当前图片的缩放信息\r\n              stateMap.set(imgState.currentUrl, {\r\n                scale: imgState.imgScale,\r\n                top: imgState.imgTop,\r\n                left: imgState.imgLeft,\r\n                rotate: imgState.imgRotate,\r\n              });\r\n              // 如果之前已存储缩放信息，就应用\r\n              const stateInfo = stateMap.get(url);\r\n              if (stateInfo) {\r\n                imgState.imgScale = stateInfo.scale;\r\n                imgState.imgTop = stateInfo.top;\r\n                imgState.imgRotate = stateInfo.rotate;\r\n                imgState.imgLeft = stateInfo.left;\r\n              } else {\r\n                initState();\r\n                if (props.defaultWidth) {\r\n                  imgState.imgScale = props.defaultWidth / ele[0].naturalWidth;\r\n                }\r\n              }\r\n            } else {\r\n              if (props.defaultWidth) {\r\n                imgState.imgScale = props.defaultWidth / ele[0].naturalWidth;\r\n              }\r\n            }\r\n\r\n            ele &&\r\n              emit('img-load', {\r\n                index: imgState.currentIndex,\r\n                dom: ele[0] as HTMLImageElement,\r\n                url,\r\n              });\r\n          }\r\n          imgState.currentUrl = url;\r\n          imgState.status = StatueEnum.DONE;\r\n        };\r\n        // @ts-ignore\r\n        img.onerror = (e: Event) => {\r\n          const ele: EventTarget[] = e.composedPath();\r\n          ele &&\r\n            emit('img-error', {\r\n              index: imgState.currentIndex,\r\n              dom: ele[0] as HTMLImageElement,\r\n              url,\r\n            });\r\n          imgState.status = StatueEnum.FAIL;\r\n        };\r\n      }\r\n\r\n      // 关闭\r\n      function handleClose(e: MouseEvent) {\r\n        e && e.stopPropagation();\r\n        close();\r\n      }\r\n\r\n      function close() {\r\n        imgState.show = false;\r\n        // 移除火狐浏览器下的鼠标滚动事件\r\n        document.body.removeEventListener('DOMMouseScroll', scrollFunc);\r\n        // 恢复火狐及Safari浏览器下的图片拖拽\r\n        document.ondragstart = null;\r\n      }\r\n\r\n      // 图片复原\r\n      function resume() {\r\n        initState();\r\n      }\r\n\r\n      expose({\r\n        resume,\r\n        close,\r\n        prev: handleChange.bind(null, 'left'),\r\n        next: handleChange.bind(null, 'right'),\r\n        setScale: (scale: number) => {\r\n          if (scale > 0 && scale <= 10) imgState.imgScale = scale;\r\n        },\r\n        setRotate: (rotate: number) => {\r\n          imgState.imgRotate = rotate;\r\n        },\r\n      });\r\n\r\n      // 上一页下一页\r\n      function handleChange(direction: 'left' | 'right') {\r\n        const { currentIndex } = imgState;\r\n        const { imageList } = props;\r\n        if (direction === 'left') {\r\n          imgState.currentIndex--;\r\n          if (currentIndex <= 0) {\r\n            imgState.currentIndex = imageList.length - 1;\r\n          }\r\n        }\r\n        if (direction === 'right') {\r\n          imgState.currentIndex++;\r\n          if (currentIndex >= imageList.length - 1) {\r\n            imgState.currentIndex = 0;\r\n          }\r\n        }\r\n        handleIChangeImage(imageList[imgState.currentIndex]);\r\n      }\r\n\r\n      function handleAddMoveListener(e: MouseEvent) {\r\n        e = e || window.event;\r\n        imgState.moveX = e.clientX;\r\n        imgState.moveY = e.clientY;\r\n        const imgEl = unref(imgElRef);\r\n        if (imgEl) {\r\n          imgEl.onmousemove = moveFunc;\r\n        }\r\n      }\r\n\r\n      function moveFunc(e: MouseEvent) {\r\n        e = e || window.event;\r\n        e.preventDefault();\r\n        const movementX = e.clientX - imgState.moveX;\r\n        const movementY = e.clientY - imgState.moveY;\r\n        imgState.imgLeft += movementX;\r\n        imgState.imgTop += movementY;\r\n        imgState.moveX = e.clientX;\r\n        imgState.moveY = e.clientY;\r\n      }\r\n\r\n      // 获取图片样式\r\n      const getImageStyle = computed(() => {\r\n        const { imgScale, imgRotate, imgTop, imgLeft } = imgState;\r\n        return {\r\n          transform: `scale(${imgScale}) rotate(${imgRotate}deg)`,\r\n          marginTop: `${imgTop}px`,\r\n          marginLeft: `${imgLeft}px`,\r\n          maxWidth: props.defaultWidth ? 'unset' : '100%',\r\n        };\r\n      });\r\n\r\n      const getIsMultipleImage = computed(() => {\r\n        const { imageList } = props;\r\n        return imageList.length > 1;\r\n      });\r\n\r\n      watchEffect(() => {\r\n        if (props.show) {\r\n          init();\r\n        }\r\n        if (props.imageList) {\r\n          initState();\r\n        }\r\n      });\r\n\r\n      const handleMaskClick = (e: MouseEvent) => {\r\n        if (\r\n          props.maskClosable &&\r\n          e.target &&\r\n          (e.target as HTMLDivElement).classList.contains(`${prefixCls}-content`)\r\n        ) {\r\n          handleClose(e);\r\n        }\r\n      };\r\n\r\n      const renderClose = () => {\r\n        return (\r\n          <div class={`${prefixCls}__close`} onClick={handleClose}>\r\n            <CloseOutlined class={`${prefixCls}__close-icon`} />\r\n          </div>\r\n        );\r\n      };\r\n\r\n      const renderIndex = () => {\r\n        if (!unref(getIsMultipleImage)) {\r\n          return null;\r\n        }\r\n        const { currentIndex } = imgState;\r\n        const { imageList } = props;\r\n        return (\r\n          <div class={`${prefixCls}__index`}>\r\n            {currentIndex + 1} / {imageList.length}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      const renderController = () => {\r\n        return (\r\n          <div class={`${prefixCls}__controller`}>\r\n            <div\r\n              class={`${prefixCls}__controller-item`}\r\n              onClick={() => scaleFunc(-getScaleStep.value)}\r\n            >\r\n              <img src={unScaleSvg} />\r\n            </div>\r\n            <div\r\n              class={`${prefixCls}__controller-item`}\r\n              onClick={() => scaleFunc(getScaleStep.value)}\r\n            >\r\n              <img src={scaleSvg} />\r\n            </div>\r\n            <div class={`${prefixCls}__controller-item`} onClick={resume}>\r\n              <img src={resumeSvg} />\r\n            </div>\r\n            <div class={`${prefixCls}__controller-item`} onClick={() => rotateFunc(-90)}>\r\n              <img src={unRotateSvg} />\r\n            </div>\r\n            <div class={`${prefixCls}__controller-item`} onClick={() => rotateFunc(90)}>\r\n              <img src={rotateSvg} />\r\n            </div>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      const renderArrow = (direction: 'left' | 'right') => {\r\n        if (!unref(getIsMultipleImage)) {\r\n          return null;\r\n        }\r\n        return (\r\n          <div class={[`${prefixCls}__arrow`, direction]} onClick={() => handleChange(direction)}>\r\n            {direction === 'left' ? <LeftOutlined /> : <RightOutlined />}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      return () => {\r\n        return (\r\n          imgState.show && (\r\n            <div\r\n              class={prefixCls}\r\n              ref={wrapElRef}\r\n              onMouseup={handleMouseUp}\r\n              onClick={handleMaskClick}\r\n            >\r\n              <div class={`${prefixCls}-content`}>\r\n                {/*<Spin*/}\r\n                {/*  indicator={<LoadingOutlined style=\"font-size: 24px\" spin />}*/}\r\n                {/*  spinning={true}*/}\r\n                {/*  class={[*/}\r\n                {/*    `${prefixCls}-image`,*/}\r\n                {/*    {*/}\r\n                {/*      hidden: imgState.status !== StatueEnum.LOADING,*/}\r\n                {/*    },*/}\r\n                {/*  ]}*/}\r\n                {/*/>*/}\r\n                <img\r\n                  style={unref(getImageStyle)}\r\n                  class={[\r\n                    `${prefixCls}-image`,\r\n                    imgState.status === StatueEnum.DONE ? '' : 'hidden',\r\n                  ]}\r\n                  ref={imgElRef}\r\n                  src={imgState.currentUrl}\r\n                  onMousedown={handleAddMoveListener}\r\n                />\r\n                {renderClose()}\r\n                {renderIndex()}\r\n                {renderController()}\r\n                {renderArrow('left')}\r\n                {renderArrow('right')}\r\n              </div>\r\n            </div>\r\n          )\r\n        );\r\n      };\r\n    },\r\n  });\r\n</script>\r\n<style lang=\"less\">\r\n  .img-preview {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1000;\r\n    background: rgb(0 0 0 / 50%);\r\n    user-select: none;\r\n\r\n    &-content {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      color: white;\r\n      justify-content: center;\r\n      align-items: center;\r\n    }\r\n\r\n    &-image {\r\n      cursor: pointer;\r\n      transition: transform 0.3s;\r\n    }\r\n\r\n    &__close {\r\n      position: absolute;\r\n      top: -40px;\r\n      right: -40px;\r\n      width: 80px;\r\n      height: 80px;\r\n      overflow: hidden;\r\n      color: white;\r\n      cursor: pointer;\r\n      background-color: rgb(0 0 0 / 50%);\r\n      border-radius: 50%;\r\n      transition: all 0.2s;\r\n\r\n      &-icon {\r\n        position: absolute;\r\n        top: 46px;\r\n        left: 16px;\r\n        font-size: 16px;\r\n      }\r\n\r\n      &:hover {\r\n        background-color: rgb(0 0 0 / 80%);\r\n      }\r\n    }\r\n\r\n    &__index {\r\n      position: absolute;\r\n      bottom: 5%;\r\n      left: 50%;\r\n      padding: 0 22px;\r\n      font-size: 16px;\r\n      background: rgb(109 109 109 / 60%);\r\n      border-radius: 15px;\r\n      transform: translateX(-50%);\r\n    }\r\n\r\n    &__controller {\r\n      position: absolute;\r\n      bottom: 10%;\r\n      left: 50%;\r\n      display: flex;\r\n      width: 260px;\r\n      height: 44px;\r\n      padding: 0 22px;\r\n      margin-left: -139px;\r\n      background: rgb(109 109 109 / 60%);\r\n      border-radius: 22px;\r\n      justify-content: center;\r\n\r\n      &-item {\r\n        display: flex;\r\n        height: 100%;\r\n        padding: 0 9px;\r\n        font-size: 24px;\r\n        cursor: pointer;\r\n        transition: all 0.2s;\r\n\r\n        &:hover {\r\n          transform: scale(1.2);\r\n        }\r\n\r\n        img {\r\n          width: 1em;\r\n        }\r\n      }\r\n    }\r\n\r\n    &__arrow {\r\n      position: absolute;\r\n      top: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 50px;\r\n      height: 50px;\r\n      font-size: 28px;\r\n      cursor: pointer;\r\n      background-color: rgb(0 0 0 / 50%);\r\n      border-radius: 50%;\r\n      transition: all 0.2s;\r\n\r\n      &:hover {\r\n        background-color: rgb(0 0 0 / 80%);\r\n      }\r\n\r\n      &.left {\r\n        left: 50px;\r\n      }\r\n\r\n      &.right {\r\n        right: 50px;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n","import { computed, defineComponent, h, reactive, ref } from 'vue'\r\nimport type { RenderableComponent, UseDraggableOptions } from '@vueuse/core'\r\nimport { useDraggable } from '@vueuse/core';\r\nimport { addResizeListener, removeResizeListener, triggerWindowResize } from \"howtools\"\r\n\r\nexport interface UseDraggableProps extends UseDraggableOptions, RenderableComponent {\r\n  position: [number, number],\r\n  lockBoundary: boolean,\r\n  boundary: HTMLElement\r\n}\r\n\r\nexport const UseDraggable = defineComponent<UseDraggableProps>({\r\n  name: 'UseDraggable',\r\n  props: [\r\n    'position',\r\n    'handle',\r\n    'lockBoundary', // 是否锁定最大的边界\r\n    'boundary', // 边界元素\r\n  ] as unknown as undefined,\r\n  setup(props, { slots, emit }) {\r\n    const target = ref() // 当前拖动的位置\r\n    const handle = computed(() => props.handle ?? target.value) // 整体元素\r\n\r\n    const data = useDraggable(target, {\r\n      handle,\r\n      initialValue: computed(() => props.position ? { x: props.position[0], y: props.position[1] } : { x: 0, y: 0 }),\r\n    })\r\n\r\n    // 获取边界值\r\n    const bodyBoundary = ref({ x: 0, y: 0, width: 0, height: 0 })\r\n    const bodyRect = () => {\r\n      bodyBoundary.value = props.boundary.getBoundingClientRect()\r\n    }\r\n    onMounted(bodyRect)\r\n    addResizeListener(props.boundary as HTMLDivElement, bodyRect)\r\n    onUnmounted(() => removeResizeListener(props.boundary as HTMLDivElement, bodyRect))\r\n\r\n    triggerWindowResize()\r\n    const dragStype = computed(() => {\r\n      // 计算当前元素边界\r\n      if (!props.lockBoundary)`top:${data.x.value}px;left:${data.y.value}px`\r\n      if (!unref(target)) return `top:${data.x.value}px;left:${data.y.value}px`\r\n      const targetRect = unref(target)?.getBoundingClientRect()\r\n      const targetWidth = unref(targetRect)?.width\r\n      const targetHeight = unref(targetRect).height\r\n      // 拖动最大边界\r\n      const _x = Math.min(Math.max(bodyBoundary.value.x, data.x.value), bodyBoundary.value.width - targetWidth)\r\n      const _y = Math.min(Math.max(bodyBoundary.value.y, data.y.value), bodyBoundary.value.height - targetHeight)\r\n      // 修改data的值\r\n      data.x.value = _x\r\n      data.y.value = _y\r\n      return `top:${_y}px;left:${_x}px`\r\n    })\r\n\r\n    return () => {\r\n      if (slots.default)\r\n        return h(props.as || 'div', { ref: target, style: `touch-action:none;${unref(dragStype)}` }, slots.default(reactive(data)))\r\n    }\r\n  },\r\n})"],"names":["resumeSvg","rotateSvg","scaleSvg","unScaleSvg","unRotateSvg","StatueEnum","props","show","type","default","imageList","index","scaleStep","defaultWidth","maskClosable","rememberState","prefixCls","_sfc_main","defineComponent","name","emits","emit","stateMap","currentUrl","imgScale","imgRotate","imgTop","imgLeft","currentIndex","moveX","moveY","wrapElRef","ref","imgElRef","initMouseWheel","handleIChangeImage","wrapEl","unref","getScaleStep","computed","_a","imgState","e","scaleFunc","imgEl","img","url","ele","stateInfo","initState","dom","close","expose","scale","getImageStyle","transform","maxWidth","getIsMultipleImage","watchEffect","init","_createVNode","rotateFunc","direction","handleChange","handleMouseUp","renderClose","renderIndex","renderController","renderArrow","UseDraggable","slots","target","handle","data","useDraggable","bodyBoundary","bodyRect","onMounted","addResizeListener","onUnmounted","removeResizeListener","triggerWindowResize","dragStype","targetRect","targetWidth","targetHeight","_x","_y","h","reactive"],"mappings":"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"}